'("x" . ("y" . ("z" . nil)))
(cons "x" (cons "y" (cons "z" nil)))
(cons "x" "y")
(car (cdr '("x" "y" "z")))
(car (cdr (cons "x" (cons "y" (cons "z" nil)))))
'((("x" . "y") . "z") . nil)
'(("x" . ("y" . "z")) . nil)
nil
(cons "a" "b")
(cons "a" '("b" . "c"))
(car '("a" . "b"))
(car "a")
(cdr '("a" . "b"))
(cdr "a")
(eq "a" "b")
(eq "a" "a")
(atom '("a" . "b"))
(atom "a")
'( "a" . "b" )
'("a" "b" "c")
'("a" . ("b" . ("c" . nil)))
'("HELLO" ("BRAVE" "NEW") "WORLD")
'("HELLO" . (("BRAVE" . "NEW") . "WORLD"))
'("a" ("b" "c" "d") ("e" "f"))
'("a" . (("b" . ("c" . ("d" . nil))) . (("e" . ("f" . nil)) . nil)))
'()
'("a" . ())
'(() . "a")
'("A" "B" "C")
'(("A" "B") "C")
'("A" "B" ("C" "D"))
'("A")
'(("A"))
'("A" ("B" . "C"))
(let a "b" a)
(let a '("b" . "c") (cons a a))
(let a "b" (let c "d" (cons a c)))
(let a "b")
(let a "b" c "d")
(let let a "b")
(let true "a" true)
(cond (true . "a") (false . "b") (false . "c"))
(cond (false . "a") (true . "b") (false . "c"))
(cond (false . "a") (false . "b") (true . "c"))
(let x (cond (true . "a") (false . "b") (false . "c")) x)
(let x "a" (let y "b" (cond (true . x) (false . y))))
(let x "a" (let y "b" (cond (false . x) (true . y))))
("a". nil)
(nil. "a")
'(nil. "a")
'(nil "a")
("a" let a "a" a)
''(true false nil)
'(quote . "a")
''